razor
@page "/buildings"

<style>
    .material-icon {
        width: 16px !important;
        height: 16px !important;        
        margin-right: 4px;
        vertical-align: middle;
    }
</style>
<style>
     .cost-container {
        display: flex;
        align-items: center;
        margin-bottom: 5px; 
        justify-content: center;
        
    }
</style>
@rendermode InteractiveServer

<style>
    .construction-queue {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 10px;
        margin-bottom: 20px;
        background-color: #333;
    }
</style>
<style>
    .buildings-banner {
        background-image: url('buildings-banner.jpg'); /* Replace with your image path */
        background-size: cover;
        background-position: center;
        color: white;
        text-align: center;
        padding: 100px 20px;
        margin-bottom: 20px;
    }

    .buildings-banner h2 {
        font-size: 3em;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .buildings-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 20px;
    }

    .building-card {
        background-color: #333;
        border-radius: 5px;
        padding: 20px;
        text-align: center;
        border: 1px solid #555;
        color: white;
        display: flex; /* Added */
        flex-direction: column; /* Added */
        justify-content: space-between; /* Added */        
        flex-direction: column; /* Add this line */
        align-items: center;
    }

    .building-card img {
        width: 177px;
        height: 177px;
        
        

        object-fit: cover;
        border: 2px solid #777;
        display: flex; /* Add this line */
        justify-content: center; /* Add this line */
        align-items: center;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .building-card h3 {
        color: white;
    }
   

    .building-card .level {
        position: absolute;
        top: 10px;
        right: 10px; /* Changed from left to right */
        background-color: #555;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }

    .building-card button {
        padding: 10px;
        background-color: #555;
        color: white;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }
</style>

<div class="buildings-banner">
    <h2>Buildings</h2>
</div>
@if(ConstructionQueue.Count > 0) {
    @* Construction queue *@
    <h3>Construction Queue</h3>
    <div class="construction-queue">
        @foreach (var item in ConstructionQueue)
        {
            <div class="building-card">
                <h3>@item.Title</h3>
                <p>Duration: @item.ConstructionDuration.ToString()</p>
                @if (item.IsBuilding) {
                   <p>Time remaining: @item.TimeRemaining.ToString()</p> 
                }
            </div>
            }
        </div>
}
<div class="buildings-grid">
    @foreach (var building in Buildings)
    {
        <div class="building-card">
            <span class="level">Level: @building.Level</span>
            <img src="@building.Image" alt="@building.Title" />
            <h3>@building.Title</h3>
            <p>@building.Description</p>
            <div class="cost-container">
              <img src="metal-icon.png" alt="Metal" class="material-icon" /> Metal: @building.MetalCost
            </div>
            <div class="cost-container">
              <img src="crystal-icon.png" alt="Crystal" class="material-icon" /> Crystal: @building.CrystalCost
            </div>
             <div class="cost-container">
             <img src="deuterium-icon.png" alt="Deuterium" class="material-icon" /> Deuterium: @building.DeuteriumCost
             </div>
            <p>Duration: @building.ConstructionDuration.ToString()</p>
            <p>Energy Consumption: @building.EnergyConsumption</p>
            
             @if (!ConstructionQueue.Contains(building))
            {
                 @if (building.Level < 1)
                 {
                     <button id="construct-building-@building.Id" @onclick="() => AddToQueue(building)">Construct</button>
                 }
                 else
                 {
                     <button id="dismantle-building-@building.Id" @onclick="() => Dismantle(building)">Dismantle</button>
                     <button id="upgrade-building-@building.Id" @onclick="() => AddToQueue(building)">Upgrade</button>
                 }
            } else {
                 if(building.IsBuilding){
                    <p>Time remaining: @building.TimeRemaining.ToString()</p>
                    <button @onclick="() => Cancel(building)">Cancel</button>
                }
            }
                 
        </div>
    }
</div>  




@code{
    public class BuildingDto
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public int MetalCost { get; set; }
        public int CrystalCost { get; set; }
        public int DeuteriumCost { get; set; }
        public TimeSpan ConstructionDuration { get; set; }

        public string Image { get; set; }
        public int Level { get; set; } = 1;
        public int EnergyConsumption { get; set; }

        public bool IsBuilding {get; set;} = false;

        public TimeSpan TimeRemaining { get; set; }
    }

    [Parameter]
    public List<BuildingDto> Buildings { get; set; } = new List<BuildingDto>();


    private List<BuildingDto> ConstructionQueue = new List<BuildingDto>();
    private BuildingDto CurrentBuilding { get; set; } = null;

    private async Task AddToQueue(BuildingDto building)
    {
        if (ConstructionQueue.Count >= 5) return; // Max 5 buildings in queue
        ConstructionQueue.Add(building);

        if (CurrentBuilding == null || !CurrentBuilding.IsBuilding)
        {
            await StartNextBuilding();
        }
    }

    private void Dismantle(BuildingDto building)
    {
        Console.WriteLine($"Dismantling {building.Title}");
    }

    private async Task StartNextBuilding()
    {
        if (ConstructionQueue.Count > 0)
        {
            CurrentBuilding = ConstructionQueue[0];            
            CurrentBuilding.IsBuilding = true;
            CurrentBuilding.TimeRemaining = CurrentBuilding.ConstructionDuration;

            while (CurrentBuilding.TimeRemaining > TimeSpan.Zero)
            {
                await Task.Delay(1000); // Wait for 1 second
                CurrentBuilding.TimeRemaining = CurrentBuilding.TimeRemaining.Subtract(TimeSpan.FromSeconds(1));
                await InvokeAsync(StateHasChanged);
            }

            CurrentBuilding.IsBuilding = false;
            ConstructionQueue.RemoveAt(0);
            CurrentBuilding = null;
            await InvokeAsync(StateHasChanged);

            // Start the next building in the queue if there is one
            await StartNextBuilding();
        }
        else
        {
            CurrentBuilding = null;
        }
    }

    private void Cancel(BuildingDto building) {
        if(building == CurrentBuilding) CurrentBuilding = null;
         ConstructionQueue.Remove(building);
         building.IsBuilding = false;
         building.TimeRemaining = TimeSpan.Zero;
         StartNextBuilding();
    }

    private List<BuildingDto> CreateDefaultBuildings() {
        List<BuildingDto> defaultBuildings = new List<BuildingDto>();
        defaultBuildings.Add(new BuildingDto
        {
            Title = "Metal Mine",
            Description = "Produces Metal.",
            MetalCost = 60,
            CrystalCost = 15,
            DeuteriumCost = 0,
            ConstructionDuration = TimeSpan.FromSeconds(10),
            Image = "building1.jpg",
            EnergyConsumption = 10
        });
        defaultBuildings.Add(new BuildingDto
        {
            Title = "Crystal Mine",
            Description = "Produces Crystal.",
            MetalCost = 48,
            CrystalCost = 24,
            DeuteriumCost = 0,
            ConstructionDuration = TimeSpan.FromSeconds(15),
            Image = "building2.jpg",
            EnergyConsumption = 8
        });
        defaultBuildings.Add(new BuildingDto
        {
                Title = "Deuterium Synthesizer",
                Description = "Produces Deuterium.",
                MetalCost = 225,
                CrystalCost = 75,
                DeuteriumCost = 0,   
                ConstructionDuration = TimeSpan.Parse("00:00:30"),
                Image = "building3.jpg",
                EnergyConsumption = 15
            });
            defaultBuildings.Add(new BuildingDto
        {
                Title = "Solar Plant",
                Description = "Generates Energy.",
                MetalCost = 75,
                CrystalCost = 30,
                DeuteriumCost = 0,    
                ConstructionDuration = TimeSpan.Parse("00:00:20"),
                Image = "building4.jpg",
                EnergyConsumption = -20
            });
            defaultBuildings.Add(new BuildingDto
        {
                Title = "Robotics Factory",
                Description = "Builds robots.",
                MetalCost = 400,
                CrystalCost = 120,
                DeuteriumCost = 200,    
                ConstructionDuration = TimeSpan.Parse("00:01:00"),
                Image = "building5.jpg",
                EnergyConsumption = 30
            });

            defaultBuildings.Add(new BuildingDto
        {
                Title = "Shipyard",
                Description = "Builds ships.",
                MetalCost = 400,
                CrystalCost = 200,
                DeuteriumCost = 100,    
                ConstructionDuration = TimeSpan.Parse("00:01:30"),
                Image = "building6.jpg",
                EnergyConsumption = 25
            });
            defaultBuildings.Add(new BuildingDto
        {
                Title = "Metal Storage",
                Description = "Stores Metal.",
                MetalCost = 200,
                CrystalCost = 0,
                DeuteriumCost = 0,    
                ConstructionDuration = TimeSpan.Parse("00:00:45"),
                Image = "building7.jpg",
                EnergyConsumption = 0
            });
            defaultBuildings.Add(new BuildingDto
        {
                Title = "Crystal Storage",
                Description = "Stores Crystal.",
                MetalCost = 200,
                CrystalCost = 100,
                DeuteriumCost = 0,    
                ConstructionDuration = TimeSpan.Parse("00:00:50"),
                Image = "building8.jpg",
                EnergyConsumption = 0
            });
            defaultBuildings.Add(new BuildingDto
        {
                Title = "Deuterium Storage",
                Description = "Stores Deuterium.",
                MetalCost = 200,
                CrystalCost = 200,
                DeuteriumCost = 0,    
                ConstructionDuration = TimeSpan.Parse("00:00:55"),
                Image = "building9.jpg",
                EnergyConsumption = 0
            });
            defaultBuildings.Add(new BuildingDto
        {
                Title = "Research Lab",
                Description = "Allows to do Research.",
                MetalCost = 400,
                CrystalCost = 200,
                DeuteriumCost = 100,    
                ConstructionDuration = TimeSpan.Parse("00:01:15"),
                Image = "building10.jpg",
                EnergyConsumption = 20
            });

            defaultBuildings.Add(new BuildingDto
        {
                Title = "Terraformer",
                Description = "Allows to build more buildings.",
                MetalCost = 50000,
                CrystalCost = 100000,
                DeuteriumCost = 1000,    
                ConstructionDuration = TimeSpan.Parse("01:00:00"),
                Image = "building11.jpg",
                EnergyConsumption = 50
            });

            defaultBuildings.Add(new BuildingDto
        {
                Title = "Missile Silo",
                Description = "Stores interplantary missiles.",
                MetalCost = 20000,
                CrystalCost = 20000,
                DeuteriumCost = 1000,    
                ConstructionDuration = TimeSpan.Parse("00:05:00"),
                Image = "building12.jpg",
                EnergyConsumption = 0
            });
            defaultBuildings.Add(new BuildingDto
        {
                Title = "Nanite Factory",
                Description = "Increases Building speed.",
                MetalCost = 1000000,
                CrystalCost = 500000,
                DeuteriumCost = 100000,    
                ConstructionDuration = TimeSpan.Parse("02:00:00"),
                Image = "building13.jpg",
                EnergyConsumption = 100
            });

        foreach (var item in defaultBuildings) item.Id = Guid.NewGuid();

        return defaultBuildings;
    }

    protected override void OnParametersSet()
    {
        if (Buildings == null || Buildings.Count == 0)
        {
            Buildings = CreateDefaultBuildings();
        }
    }

}
